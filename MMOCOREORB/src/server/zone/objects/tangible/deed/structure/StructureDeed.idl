/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.deed.structure;

import server.zone.objects.structure.StructureObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.tangible.deed.Deed;
import server.zone.objects.scene.SceneObject;
include server.zone.packets.scene.AttributeListMessage;
include server.zone.objects.tangible.deed.components.PlaceStructureComponent;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include system.util.VectorMap;

class StructureDeed extends Deed {
	protected unsigned int surplusMaintenance;
	protected unsigned int surplusPower;
	protected float extractionRate;
	protected float hopperSizeMax;
	protected unsigned long controlDeviceID;
	protected unsigned int additionalLots;

	protected transient PlaceStructureComponent placeStructureComponent;

	public StructureDeed() {
		Logger.setLoggingName("StructureDeed");

		surplusMaintenance = 0;
		surplusPower = 0;
		extractionRate = 0;
		hopperSizeMax = 0;
		controlDeviceID = 0;
		additionalLots = 0;
	}

	@dereferenced
	protected VectorMap<SceneObject, int> children;

	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage alm, CreatureObject object);

	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);

	public native void initializeTransientMembers();

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate = false);

	public int placeStructure(CreatureObject creature, float x, float y, int angle) {
		if (placeStructureComponent) {
			return placeStructureComponent.placeStructure(this, creature, x, y, angle);
		}

		return 1;
	}

	public int notifyStructurePlaced(CreatureObject creature, StructureObject structure) {
		if (placeStructureComponent) {
			return placeStructureComponent.notifyStructurePlaced(this, creature, structure);
		}

		return 1;
	}

	public void setSurplusMaintenance(unsigned int maint) {
		surplusMaintenance = maint;
	}

	public void setControlDeviceID(unsigned long oid) {
		controlDeviceID = oid;
	}

	public void setChildren(SceneObject child, int cellID) {
		children.put(child, cellID);
	}

	public void setSurplusPower(unsigned int power) {
		surplusPower = power;
	}

	public void setExtractionRate(float rate) {
		extractionRate = rate;
	}

	public void setHopperSize(float size) {
		hopperSizeMax = size;
	}

	public void setAdditionalLots(int size) {
		additionalLots = size;
	}

	@read
	public unsigned int getSurplusMaintenance() {
		return surplusMaintenance;
	}

	@read
	public unsigned int getSurplusPower() {
		return surplusPower;
	}

	@read
	public float getExtractionRate() {
		return extractionRate;
	}

	@read
	public float getHopperSize() {
		return hopperSizeMax;
	}

	@read
	public int getAdditionalLots() {
		return additionalLots;
	}

	@dirty
	public boolean isStructureDeed() {
		return true;
	}

	@local
	@dirty
	public int getChild(int i) 
	{
		return children.get(i);
	}

	@local
	@dirty
	public int getChildrenSize() {
		return children.size();
	}

	@local
	@dirty
	public unsigned long getControlDeviceID() {
		return controlDeviceID;
	}

	@local
	@preLocked
	public VectorMap<SceneObject, int> getChildMap() {
		return children;
	}
}
