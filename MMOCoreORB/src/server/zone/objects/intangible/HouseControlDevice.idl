/*
				Copyright <Phoenix>
		See file COPYING for copying conditions.
*/

package server.zone.objects.intangible;

import server.zone.objects.intangible.ControlDevice;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;
include server.zone.managers.radial.RadialOptions;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.scene.SceneObject;
include system.util.SortedVector;
include system.util.VectorMap;

class HouseControlDevice extends ControlDevice 
{

	public HouseControlDevice() {
		Logger.setLoggingName("HouseControlDevice");
	}

	@dereferenced
	protected VectorMap<SceneObject, int> children;

	@preLocked
	@arg1preLocked
	public native void unpackHouse(CreatureObject player);

	@preLocked
	@arg1preLocked
	public native void payMaintenance(CreatureObject player);

	@preLocked
	@arg1preLocked
	public native void checkStatus(CreatureObject player);

	@preLocked
	public void setChildren(SceneObject child, int cellID) {
		children.put(child, cellID);
	}

	@preLocked
	@arg1preLocked
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {
		Logger.info("selected call");

		SceneObject parentobj = player.getParent();
		
		if (selectedID == RadialOptions.UNPACK_HOUSE) 
		{
			if (!super.controlledObject) 
			{
				Logger.error("null controlled object in vehicle control device");
				return 1;
			} 
			else if (!parentobj) 
			{
				this.unpackHouse(player);
			}
		}

		else if (selectedID == RadialOptions.PAY_MAINT) 
		{
			if (!super.controlledObject) 
			{
				Logger.error("null controlled object in vehicle control device");
				return 1;
			} 
			else if (!parentobj) 
			{
				this.payMaintenance(player);
			}
		}

		else if (selectedID == RadialOptions.CHECK_STATUS) 
		{
			if (!super.controlledObject) 
			{
				Logger.error("null controlled object in vehicle control device");
				return 1;
			} 
			else if (!parentobj) 
			{
				this.checkStatus(player);
			}
		}
		
	return 0;
	}
	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	@dirty
	public native int canBeDestroyed(CreatureObject player);

	@local
	@dirty
	public int getChild(int i) 
	{
		return children.get(i);
	}

	@local
	@dirty
	public int getChildrenSize() {
		return children.size();
	}

	@dirty
	public boolean isHouseControlDevice() {
		return true;
	}
}
